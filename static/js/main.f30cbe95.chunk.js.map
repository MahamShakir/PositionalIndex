{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pluralize","require","App","useState","input","setInput","result","setResult","pos_index","setPosIndex","handleClick","i","j","inter_result","query","toLowerCase","split","replace","singular","filter","e","flat","curr_op","operators","complement","inter_query","result_stack","postfix_query","push","pop","length","console","log","element","shift","word","value","includes","word1","word2","Set","parseInt","element2","proximity","distance","Math","abs","sort","a","b","join","useEffect","fetch","headers","then","response","json","myJson","Grid","container","spacing","alignItems","justify","style","margin","Typography","variant","textAlign","color","marginTop","height","width","backgroundColor","item","xs","TextField","id","label","fullWidth","onChange","target","onKeyPress","key","Button","onClick","size","startIcon","fontWeight","Card","CardContent","overflowWrap","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f30cbe95.chunk.js","sourcesContent":["import React , { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport FindInPage from '@material-ui/icons/FindInPage';\nimport Search from '@material-ui/icons/Search'\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport 'fontsource-roboto';\nimport { WrapText } from '@material-ui/icons';\nvar pluralize = require('pluralize')\n\n\nfunction App() {\n  let [input, setInput] = useState(\"\");\n  let [result, setResult] = useState(\"NaN\");\n  let [pos_index, setPosIndex] = useState([])\n\n  const getData = () => {\n    fetch('data.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        setPosIndex(myJson)\n      });\n  }\n\n  function handleInput(e){\n    setInput(e.target.value)\n  }\n\n\n  function handleClick(){\n    let i,j;\n    let inter_result = []\n    setResult(\"...processing\")\n\n    /* ***tokenise query similar to that for dictionary*** */\n    let query = input.toLowerCase().split(\" \");\n    for(i in query){\n      query[i] = query[i].replace(/[.,'—’‘ªã©¯\\/#!@?$%\\^&\\*;:{}=\\-_`~]/g,\"\");\n      query[i] = query[i].replace(/\\s{2,}/g,\" \");\n      query[i] = query[i].replace(/[(]/g, \"( \");\n      query[i] = query[i].replace(/[)]/g, \" )\");\n      query[i] = pluralize.singular(query[i])\n    }\n    //remove empty spaces\n    query = query.filter(e => e != \"\")\n    //split \"(\" and \")\" for expression handling\n    for (i in query){\n      query[i] = query[i].split(\" \")\n    }\n    //flatten [ [], [] ..] to [ ]\n    query = query.flat(1);\n    //remove redundancies\n    query = query.filter(e => e != \"\")\n\n    /* ***Query Processing*** */\n    //start with building postfix expression of the query\n    let operators = {}; //object to store boolean precedence\n    operators['('] = 0;\n    operators[')'] = 0;\n    operators['or'] = 1;\n    operators['and'] = 2;\n    operators['not'] = 3;\n\n    let complement = []; //helper for NOT query\n    for (i=1;i<=50;i++){\n      complement[i-1] = i;\n    }\n\n    let curr_op; //helpers for postfix notation\n    let inter_query = []; \n    let result_stack = [];\n    let postfix_query = []; //final result of postfix\n\n    for(i of query){\n      if(i == '('){\n        inter_query.push(i);\n      }\n\n      else if(i == ')'){\n        curr_op = inter_query.pop();\n        while( curr_op != '('){\n          postfix_query.push(curr_op);\n          curr_op = inter_query.pop();\n        }\n      }\n\n      else if(i in operators){\n        if(inter_query){\n          curr_op = inter_query[inter_query.length - 1]\n          while(inter_query && operators[curr_op] > operators[i]){\n            postfix_query.push(inter_query.pop());\n            if(inter_query){\n              curr_op = inter_query[inter_query.length - 1];\n            }\n          }\n        }\n        inter_query.push(i);\n      }\n\n      else{\n        postfix_query.push(i);\n      }\n    }\n\n    while(inter_query.length != 0){\n      postfix_query.push(inter_query.pop());\n    }      \n\n    //postfix_query now has the updated form of original query in postfix notation\n    console.log(postfix_query);\n\n    //process the postfix notation\n    while(postfix_query.length != 0){\n      inter_result = []; //re-initialise it empty\n      let element = postfix_query.shift();\n      \n      if(element == 'not'){\n        let word = result_stack.pop();\n        inter_result = complement.filter(value =>  !word.includes(value))\n      }\n\n      else if(element == 'and'){\n        let word1 = result_stack.pop();\n        let word2 = result_stack.pop();\n        inter_result = word1.filter(value => word2.includes(value));\n      }\n\n      else if(element == 'or'){\n        let word1 = result_stack.pop();\n        let word2 = result_stack.pop();\n        inter_result = [...new Set([...word1, ...word2])];\n      }\n\n      else if(typeof parseInt(postfix_query[1]) ==='number' && (parseInt(postfix_query[1]%1))===0){\n        let element2 = postfix_query.shift();\n        let proximity = parseInt(postfix_query.shift()) + 1;\n        let word1 = pos_index[element];\n        let word2 = pos_index[element2];\n        if(word1 && word2){\n          for(i of word1){\n            for(j of word2){\n              if(i[0] != j[0])  continue;\n              \n              let distance = Math.abs(i[1] - j[1]);\n              if(distance && distance == proximity){\n                inter_result.push(i[0]);\n              }\n            }\n          }\n        }\n        inter_result = [...new Set(inter_result)];\n      }\n\n      else {\n        let word = pos_index[element]\n        if(word){\n          for(i of word){\n            if(!inter_result.includes(i[0]))\n              inter_result.push(i[0]);\n          }\n        }\n      }\n      result_stack.push(inter_result);\n    }\n\n    if(result_stack.length != 1)  setResult(\"Invalid Query, Please Rephrase with Proper Operators\");\n    else if(result_stack[0].length == 0) setResult(\"No Documents Available, Please Rephrase Query\")\n    else{\n      result = result_stack[0].sort((a,b) => a - b).join(\" , \");\n      setResult(result);\n    }  \n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  return (\n    <div>\n      <Grid container spacing={3} alignItems=\"center\" justify=\"center\" style={{margin:\"auto\"}}>\n        <Typography variant=\"h3\" style={{textAlign:\"center\" , color:\"#3f51b5\" , marginTop: \"20%\" }} >Story Retriever</Typography>\n        <div style={{ marginTop:10 ,height:\"1px\" , width:\"100%\", backgroundColor:\"gray\"}}>\n        </div>\n        <Grid item xs={12} >\n        </Grid>\n        <Grid item xs={12} >\n        </Grid>\n        <Grid item  >\n          <FindInPage/>\n        </Grid>\n        <Grid item alignItems=\"center\" justify=\"center\" xs={8}>\n          <TextField id=\"search-field\" label=\"Enter Query\" fullWidth=\"true\" onChange={handleInput} onKeyPress={(e) => { if(e.key === 'Enter') handleClick()}} />\n        </Grid>\n        <Grid item xs={12} >\n        </Grid>\n        <Button\n        onClick={handleClick}\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"medium\"\n        startIcon={<Search />}>\n        Search\n        </Button>\n        <div style={{ marginTop:20 , height:\"1px\" , width:\"100%\", backgroundColor:\"gray\"}}>\n        </div>\n\n        <Grid item xs={11} style={{marginTop:15}}>\n          <Typography variant=\"button\" style={{color:\"#3f51b5\", fontWeight:\"bold\"}}>Result Set:</Typography>\n          <Card variant=\"outlined\" style={{backgroundColor:\"#e0e0e6\"}}>\n            <CardContent style={{overflowWrap:\"break-word\"}}>\n              <Typography variant=\"button\" style={{fontSize:\"18px\"}} >{result}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}